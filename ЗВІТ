Відокремлений структурний підрозділ 

«Волинський фаховий коледж 

Національного університету харчових технологій» 

 

 

 

 

 

 

Звіт до лабораторної роботи №6 

“Розробка застосунку для взаємодії з БД під управлінням MySQL” 

з дисципліни «Бази даних» 

 

 

 

 

 

Виконала: 

Студент 3 курсу, групи ІПЗ-32 

Павліха Ірина 

Перевірив: 

Ройко О.Ю. 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Луцьк 2024 

Мета: Навчитися створювати застосунки для взаємодії з БД під управлінням MySQL засобами мови PHP 
Посилання на проект https://github.com/IraPavlikha/lab6BD 

 

1. /assets 

style.css: Стилі для сайту. 

script.js: JavaScript для додавання інтерактивності на сторінці. 

2. /includes 

db.php: Файл для підключення до бази даних (налаштування підключення до MySQL). 

header.php: Шаблон для верхньої частини сторінки (зазвичай містить HTML-теги <head>, меню навігації). 

footer.php: Шаблон для нижньої частини сторінки (зазвичай містить футер з контактною інформацією або копірайт). 

navbar.php: Шаблон для навігаційної панелі, яка містить посилання на основні сторінки проекту. 

3. /pages 

Це основні сторінки проекту для управління даними: 

add_personel.php: Форма для додавання нового персоналу. 
delete_personel.php: Форма для видалення персоналу. 

personel.php: Сторінка для перегляду або редагування списку персоналу. 

update_personel.php: Оновлення даних персоналу. 

 

Файли працюють разом для керування даними персоналу на сайті. add_personel.php дозволяє додавати нових співробітників до бази даних. delete_personel.php дає можливість видаляти запис про персонал. personel.php відображає список співробітників і дає можливість редагувати чи видаляти записи. update_personel.php дозволяє редагувати дані існуючого персоналу в базі даних. Усі ці файли взаємодіють для забезпечення повного функціоналу управління персоналом. 

 

add_pokupec.php: Форма для додавання нового покупця. 

delete_pokupec.php: Форма для видалення покупця. 

pokupec.php: Сторінка для перегляду або редагування списку покупців. 

update_pokupec.php: Оновлення даних покупця. 

Файли add_pokupec.php, delete_pokupec.php, pokupec.php та update_pokupec.php взаємозв'язані через функціональність управління даними покупців у системі. Форма на add_pokupec.php дозволяє додавати нового покупця в базу даних, передаючи введені дані через POST-запит для збереження. На сторінці pokupec.php відображається список всіх покупців, що дозволяє переглядати та редагувати їхні дані. Якщо необхідно оновити інформацію про покупця, то використовується форма з update_pokupec.php, де редагуються конкретні поля покупця в базі. Для видалення покупця застосовується форма delete_pokupec.php, де вибраний покупець буде видалений із системи через відповідний SQL-запит. Усі ці операції взаємодіють з базою даних, забезпечуючи повний цикл керування інформацією про покупців. 

 

apteki.php: Сторінка для перегляду або редагування інформації про аптеки. 

update_apteka.php: Оновлення даних аптеки. 

 

Сторінка apteki.php використовується для перегляду списку аптек, де користувач може побачити деталі про кожну аптеку (назва, адреса, телефон тощо). Якщо потрібно змінити інформацію, користувач може перейти на сторінку update_apteka.php, яка дозволяє редагувати ці дані. При редагуванні, скрипт на update_apteka.php приймає нові значення, виконує SQL-запит для оновлення запису в базі даних, і після цього перенаправляє користувача назад на apteki.php, де оновлена інформація відображається. Таким чином, ці дві сторінки взаємозв'язуються: apteki.php показує дані, а update_apteka.php дозволяє їх змінювати. 

 

liky.php: Сторінка для перегляду або редагування інформації про ліки. 

update_liky.php: Оновлення даних ліків. 

 

Сторінка liky.php дозволяє користувачу переглядати список ліків, а також додавати нові ліки до бази даних через форму. Якщо потрібно редагувати існуючі дані, користувач може перейти на update_liky.php, де можна змінити інформацію про конкретний препарат. Після внесення змін на update_liky.php, дані оновлюються в базі даних за допомогою SQL-запиту, і користувач перенаправляється назад на liky.php, де відображається оновлений список ліків. Ці дві сторінки взаємопов'язані, оскільки liky.php показує список ліків, а update_liky.php дозволяє редагувати чи оновлювати їх дані. 

 

postachalnyk.php: Сторінка для додавання або редагування постачальників. 

 

Сторінка postachalnyk.php дозволяє користувачу додавати нових постачальників або редагувати вже існуючі дані про них. Користувач заповнює форму з необхідною інформацією, такою як назва компанії, контактні дані тощо. Якщо це новий постачальник, то форма відправляє дані до бази даних для збереження. Якщо потрібно відредагувати інформацію про постачальника, на сторінці є можливість вибрати конкретного постачальника зі списку, а потім оновити його дані через ту саму форму. Після збереження або редагування даних, користувач бачить оновлений список постачальників або підтвердження успішного оновлення інформації. 

 

zamovlennya.php: Сторінка для перегляду або додавання замовлень. 

Сторінка zamovlennya.php дозволяє користувачам переглядати всі існуючі замовлення або додавати нові. Крім того, на цій сторінці можна переглянути список всіх замовлень, включаючи дату, аптеку та покупця, що дозволяє зручно контролювати процес замовлень. 

4. /reports 

Це сторінки для генерації звітів: 

report_apteka.php: Звіт по аптеках. 

 

Ця сторінка генерує звіт по аптеках. Коли користувач переходить на цю сторінку, PHP-скрипт виконує запит до бази даних, отримуючи інформацію про аптеки. Дані можуть бути відображені в таблиці або в іншому форматі для наглядності. 

report_zamovlennya.php: Звіт по замовленнях. 

 

Ця сторінка відповідає за генерування звіту по замовленнях. Вона збирає дані щодо замовлень з бази, що включають інформацію про дату, кількість товару, замовника і т.д. Цей звіт може бути виведений в таблиці чи іншому зручному вигляді. 

 

report_liky.php: Звіт по ліках. 

 

Ця сторінка генерує звіт по ліках. Вона може включати інформацію про найменування ліків, кількість в наявності, постачальника, дату надходження тощо. Такі дані також можуть бути відображені в таблиці або іншому форматі.  
 

5. index.php 

Головна сторінка сайту, яка може містити загальну інформацію та навігацію. 

 

6. search.php 

Форма для пошуку в базі даних, яка використовується для пошукових запитів на сайті. 

Форма пошуку на сторінці search.php дозволяє користувачам вводити запити для пошуку даних у базі (наприклад, інформація про ліки, персонал, покупців тощо). 

Запити до бази виконуються через PHP-скрипт, який отримує введені користувачем дані та формує SQL-запит для пошуку відповідних записів. 

Результати пошуку відображаються на тій же сторінці, надаючи користувачеві змогу переглядати знайдену інформацію. 

 

Контрольні запитання 

Яким чином відбувається підключення до БД засобами PHP& 

Підключення до БД засобами PHP: Для підключення до бази даних MySQL в PHP використовуються функції mysqli_connect() або об'єктно-орієнтований підхід через клас mysqli.  

Приклад: 

$connection = mysqli_connect('localhost', 'username', 'password', 'database_name'); 

 

У чому відмінність технологій MySQLi та PDO? 

MySQLi: Підтримує лише MySQL, дозволяє використовувати процедурний або об'єктно-орієнтований стиль, і має спеціалізовані методи для роботи з MySQL. 

PDO (PHP Data Objects): Підтримує кілька різних баз даних (MySQL, PostgreSQL, SQLite тощо), працює тільки в об'єктно-орієнтованому стилі, пропонує більш гнучкий і безпечний підхід до роботи з базами даних. 

Яким чином вивести результат запиту на сторінку? 

Виведення результату запиту на сторінку: Для виведення результату запиту на сторінку в PHP потрібно спочатку виконати запит, отримати результати і потім вивести їх.  

Приклад: 

$result = mysqli_query($connection, "SELECT * FROM table"); 

while ($row = mysqli_fetch_assoc($result)) { 

    echo $row['column_name']; 

} 

 
